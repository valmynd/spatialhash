import test from "ava"
import {triangulate} from "../src/experimental/isosurface/surfacenets";
import {nth_element} from "../src/experimental/kdtree/cpp_stl";
import {KDTree} from "../src/experimental/kdtree/kdtree";
import {PointHash3D} from "../src/kdhash";
import {distanceBetweenPoints} from "../src/geometry";

function randomArray(rangeBegin = 0, rangeEnd = 9) {
  let arr = new Array(rangeEnd - rangeBegin)
  for (let i = rangeBegin, t = rangeEnd; i < t; i++) arr[i] = Math.round(Math.random() * t)
  return arr
}

test('nth_element', t => {
  let sample = randomArray()//[5, 6, 4, 3, 2, 6, 7, 9, 3]
  let m = Math.floor(sample.length / 2), l = sample.length
  nth_element(sample, 0, m, l)
  //console.log("nth_value() result:", sample, "(median=" + sample[m] + ")")
  for (let i = 0; i < m; i++) t.true(sample[i] <= sample[m])
  for (let i = m; i < l; i++) t.true(sample[i] >= sample[m])
})

const K = 3
const bounds = [[-10, -10, -10], [10, 10, 10]] // bounds of the sphere
const sphere = triangulate([32, 32, 32], (x, y, z) => (Math.sqrt(x ** 2 + y ** 2 + z ** 2) - 7), bounds)

const precalc = [596,603,597,478,710,825,715,711,706,602,490,491,485,374,484,828,714,719,368,591,470,480,592,590,820,707,700,580,598,375,258,248,370,369,486,479,360,829,925,924,824,1020,1025,1126,1024,1127,1122,929,1031,933,1028,928,1135,1134,1130,1131,920,908,915,916,814,1010,1119,1118,1017,1112,813,921,818,819,812,914,1123,1021,1016,607,494,384,378,495,499,610,614,615,611,498,503,507,392,388,506,621,618,502,393,272,271,266,159,265,379,270,264,380,385,281,170,164,158,277,389,280,276,606,1036,1039,938,1034,1145,1140,1144,1141,1138,842,943,942,940,844,1043,1148,1042,1038,936,837,836,723,718,833,1030,932,832,722,735,620,731,727,734,840,730,726,909,571,583,584,461,570,702,701,689,690,582,473,472,350,340,460,581,458,459,572,573,453,454,574,568,692,691,693,683,452,352,351,353,343,342,341,462,463,682,898,796,899,797,1000,1103,1102,1001,1104,1114,806,688,807,808,910,1011,1113,1012,680,1004,1003,997,896,996,1096,1106,1097,1098,902,798,681,799,800,900,1002,1105,901,471,44,45,35,36,27,154,34,26,143,46,66,65,55,56,54,64,172,166,67,37,47,38,48,29,144,28,145,24,0,2,7,8,3,6,68,57,58,160,236,249,237,250,363,348,361,362,349,130,165,171,141,153,152,259,140,260,131,240,239,231,241,238,228,229,230,126,132,142,133,134,125,251,252,124,1204,1235,1234,1341,1230,1340,1441,1440,1540,1336,1445,1238,1242,1243,1239,1347,1449,1344,1444,1436,1227,1226,1220,1326,1333,1424,1431,1432,1425,1529,1231,1337,1332,1430,1437,1534,1535,1528,1544,1642,1545,1541,1638,1643,1756,1763,1757,1866,1647,1646,1651,1762,1872,1878,1879,1873,1984,1750,1536,1639,1632,1530,1740,1751,1858,1868,1752,1758,1867,1874,1985,1976,1991,2098,2088,1986,1990,1248,1252,1249,1246,1253,1352,1355,1454,1350,1456,1256,1358,1354,1359,1458,1459,1560,1558,1556,1346,1452,1448,1548,1552,1549,1553,1650,1766,1655,1662,1666,1658,1654,1659,1780,1667,1663,1770,1775,1774,1771,1767,1887,1882,2000,1994,1883,1886,1778,1781,1894,1890,1891,1895,2008,2004,2009,1995,2110,2104,1996,2105,2111,2112,2106,2001,2005,2120,2116,2117,2121,2226,2220,2214,2215,1211,1210,1316,1212,1317,1414,1512,1415,1513,1222,1221,1327,1328,1426,1523,1522,1620,1524,1612,1205,1214,1312,1206,1319,1313,1320,1418,1412,1213,1318,1416,1417,1516,1515,1514,1613,1614,1622,1634,1633,1621,1730,1731,1744,1743,1732,1849,1742,1741,1846,1847,1848,1860,1861,1966,1956,1967,1624,1623,1625,1615,1728,1733,1842,1734,1841,1840,1957,1850,1851,1958,1968,1959,1969,1859,1964,1977,1965,1978,1979,2076,2089,2077,2090,2186,2099,2208,2196,2100,2197,2221,2227,2209,2187,2068,2078,2069,2070,2071,2080,2079,2081,2182,2181,2092,2091,2188,2180,2189,2198,2199,2190,2216,2294,2304,2210,2286,2287,2295,2305,2296,2306,2316,2228,2324,2222,2314,2325,2315,2326,2327,2390,2200,2288,2201,2284,2289,2297,2307,2298,2308,2317,2328,2318,2384,2386,2391,2392,2387,1462,511,515,396,400,510,625,628,514,518,404,519,522,408,523,631,630,635,639,397,285,176,182,188,289,284,401,288,292,405,293,299,294,300,304,409,298,410,634,947,950,846,848,946,1046,1150,1050,1047,1051,1153,1054,952,1056,1160,1152,1156,1157,850,624,739,743,747,738,742,746,750,751,852,853,857,754,638,856,954,1058,956,414,526,530,527,531,642,758,860,755,759,643,646,762,647,536,766,861,865,763,418,415,419,310,420,424,532,648,537,538,652,542,653,658,654,767,870,770,876,864,957,1059,960,961,1062,1162,1166,1163,1167,964,1064,1065,965,968,1068,1170,1171,1174,868,869,969,874,875,972,1175,1069,1072,1178,973,978,974,979,1076,1179,1073,1182,189,75,76,85,86,84,74,178,184,94,95,96,105,115,106,114,104,196,203,77,13,18,14,19,12,78,87,88,22,98,97,107,108,117,116,204,205,122,190,177,183,201,195,194,200,305,306,212,311,320,321,312,427,426,425,432,433,213,202,214,215,216,223,313,314,222,224,323,324,325,335,322,332,333,334,543,544,545,434,444,552,550,659,551,660,771,661,669,662,553,668,772,777,778,670,435,436,447,437,446,445,562,554,555,563,564,671,672,678,781,779,780,791,790,776,880,881,882,980,1077,1183,1184,1078,1188,886,984,985,887,1083,1189,1082,1190,788,789,888,889,890,987,986,1084,988,1191,1085,1086,1093,994,1092,1192,1199,1200,1198,1362,1258,1366,1367,1363,1463,1466,1562,1564,1260,1261,1264,1265,1268,1372,1370,1468,1566,1470,1674,1568,1678,1682,1670,1784,1671,1675,1679,1683,1472,1374,1572,1573,1569,1686,1794,1798,1785,1898,1788,1902,1906,1903,1899,2012,2016,2013,2020,1790,1791,1795,1799,1907,1910,2024,1911,2017,2124,2021,2128,2132,2129,2125,2232,2238,2244,2245,2138,2025,2026,2144,2139,2133,2134,2140,2030,1270,1274,1271,1275,1375,1473,1378,1476,1477,1480,1278,1279,1381,1282,1384,1380,1481,1580,1484,1385,1283,1485,1388,1488,1584,1585,1590,1591,1286,1389,1287,1290,1392,1494,1489,1490,1495,1592,1690,1576,1687,1691,1802,1914,1918,1915,1919,1803,1577,1694,1581,1695,1698,1806,1807,1924,1812,2034,1920,1925,2040,2035,2031,2150,2036,1808,1699,1586,1702,1818,1813,1930,1926,1814,1393,2256,2145,2146,2268,2250,2233,2239,2257,2251,2151,2041,2048,2042,2049,2043,2160,2161,2152,2153,2269,2154,2278,2279,2270,2258,2259,2271,2272,2280,2162,2172,2173,2174,2175,2163,2164,2165,2246,2334,2234,2240,2344,2335,2336,2345,2346,2337,2355,2354,2364,2252,2374,2375,2365,2356,2366,2396,2338,2347,2348,2406,2402,2397,2398,2403,2358,2376,2260,2261,2382,2377,2367,2357,2368,1931,1291,1292,1394,1496,1602,1708,1596,1597,1598,1720,1296,1297,1398,1298,1399,1500,1501,1603,1721,1502,1400,1299,1504,1503,1604,1605,1722,1606,1401,1300,1306,1307,1308,1408,1402,1409,1510,1710,1819,1703,1938,1939,1940,1932,1933,2050,2060,1820,1704,1709,1828,1829,1830,1821,1822,1941,2061,1942,1950,2062,1943,2063,2051,2052,2053,1951,1711,1712,1713,1723,1838,1831,1952,1832,1839,575,455,456,576,569,684,694,695,696,457,344,354,355,356,345,464,465,346,466,577,585,586,587,578,697,579,698,703,704,347,357,474,475,467,468,469,588,685,998,897,1005,1006,999,1099,1100,1107,1108,903,801,686,803,687,802,904,905,1007,804,1008,906,805,907,1009,1109,1110,1115,1111,1013,809,810,699,811,912,911,1116,1014,476,39,49,50,40,30,25,146,31,147,1,4,9,5,10,11,59,60,69,70,41,51,42,52,32,148,33,155,43,53,61,71,62,72,63,167,173,73,161,242,127,243,244,232,233,234,235,245,128,136,135,137,149,138,129,253,254,364,246,255,247,256,365,358,359,366,139,150,156,174,168,157,261,151,262,162,593,477,594,595,589,815,705,708,821,599,371,257,372,376,367,481,482,487,373,600,483,604,601,709,826,712,713,830,716,488,377,492,493,489,605,720,717,831,913,917,918,816,1018,1117,1015,1120,1121,1019,817,822,922,823,919,1022,1124,923,1023,827,926,1026,927,1027,1125,1128,1129,930,931,1029,934,1032,1136,1132,1133,1137,263,267,273,274,268,275,381,269,382,386,163,169,175,278,282,283,279,390,394,496,383,387,497,500,616,608,612,613,617,501,391,395,504,508,509,505,619,622,609,721,724,834,838,839,935,835,1033,937,725,728,732,736,623,737,729,733,841,843,1035,939,1037,1146,1139,1142,1143,1147,1040,941,845,944,945,1044,1041,1045,1149,1101,1207,1208,1215,1209,1315,1314,1413,1321,1322,1216,1419,1420,1323,1421,1518,1517,1519,1618,1619,1217,1324,1218,1219,1325,1422,1520,1521,1423,1223,1329,1427,1224,1330,1526,1525,1631,1527,1617,1616,1626,1627,1628,1729,1735,1843,1736,1844,1845,1852,1853,1961,1962,1960,1970,1971,1972,1854,1629,1630,1635,1636,1739,1737,1745,1738,1746,1747,1855,1856,1857,1748,1863,1963,1973,1862,1864,2073,2074,2075,2085,2072,2082,2183,2083,2084,2184,2185,2093,2094,2194,2193,2191,2192,2205,1980,1974,1981,1975,1982,2087,2095,2195,2086,2096,2101,2206,2207,2213,2102,2218,2212,2230,2224,2217,2285,2202,2203,2291,2290,2299,2309,2300,2310,2385,2319,2320,2329,2395,2389,2388,2393,2394,2330,2204,2293,2211,2303,2292,2301,2311,2302,2312,2313,2323,2223,2229,2332,2321,2322,2331,1428,1225,1331,1228,1229,1334,1429,1433,1434,1532,1335,1435,1438,1338,1232,1439,1533,1538,1539,1339,1233,1342,1236,1237,1343,1543,1442,1446,1443,1546,1240,1244,1241,1245,1345,1447,1450,1348,1547,1531,1637,1640,1537,1749,1753,1869,1865,1754,1759,1983,1988,1870,1875,1992,1987,2097,2103,1989,1641,1644,1542,1645,1761,1755,1871,1760,1764,1648,1765,1652,1649,1877,1993,1876,1880,1881,1550,1551,1451,1349,1555,1653,1769,1656,1554,1657,1661,1665,1669,1557,1660,1664,1668,1783,1453,1247,1250,1251,1255,1254,1351,1455,1353,1356,1559,1357,1360,1361,1257,1461,1561,1457,1460,1773,1997,2109,1998,2002,2115,2107,2113,2114,2108,2219,2119,2123,2006,2010,2118,2225,2231,2122,1884,1768,1772,1776,1777,1888,1999,2003,1885,1889,1893,1897,1779,1782,1892,2007,2011,1896,2333,15,20,21,16,17,89,23,90,79,99,109,118,110,100,119,123,206,207,80,91,92,81,102,82,93,185,179,83,103,101,111,120,112,121,208,197,113,191,217,218,219,209,220,227,226,315,316,225,326,336,327,328,329,337,338,339,428,198,210,180,186,199,307,221,211,308,318,317,330,429,331,430,442,443,548,441,438,448,439,440,449,557,556,567,450,566,673,679,565,674,782,792,783,793,784,451,559,546,547,560,561,665,666,774,558,663,675,664,676,677,785,786,773,794,892,891,893,795,990,989,1194,991,1089,1088,995,1094,1087,1095,1193,1201,1202,1203,894,884,883,787,885,982,981,1186,1080,1079,895,992,993,1091,1090,1195,1196,1185,192,187,193,181,286,290,287,291,402,398,297,295,301,296,302,303,411,412,406,524,399,403,516,512,513,517,521,629,626,407,413,525,520,632,636,640,637,633,641,744,748,740,627,741,749,753,745,851,752,858,757,854,855,859,959,1061,955,849,847,951,948,949,1048,1053,1049,1151,1155,953,1057,1055,1052,1154,1161,1158,1159,309,319,421,422,416,431,540,539,533,649,657,655,667,549,656,775,877,768,871,423,417,534,528,529,535,756,645,761,863,760,541,650,644,651,765,769,764,866,862,872,879,873,971,977,970,1075,1070,1176,878,975,983,1081,976,1074,1187,1180,1181,1071,1063,963,958,1060,1164,1168,1169,1165,962,966,867,1066,967,1067,1177,1172,1173,1197,2283,2282,2155,2156,2276,2273,2274,2275,2265,2281,2178,2177,2179,2169,2176,2166,2167,2168,2044,2147,2277,2267,2148,2255,2254,2266,2236,2242,2158,2059,2058,1936,2046,2045,2157,2170,2171,2264,2349,2407,2350,2339,2401,2399,2404,2405,2400,2359,2262,2383,2263,2379,2378,2369,2370,2360,2340,2353,2241,2235,2343,2342,2351,2361,2341,2352,2363,2253,2381,2373,2247,2380,2371,2372,2362,2057,1506,1505,1302,1405,1507,1608,1607,1609,1727,1404,1310,1309,1301,1311,1411,1511,1410,1403,1610,1497,1395,1294,1396,1498,1600,1599,1719,1601,1293,1407,1303,1304,1305,1406,1508,1611,1509,1726,1945,1944,1955,2066,2065,2054,2064,2055,2056,1954,1725,1724,1715,1716,1714,1833,1953,1834,1946,1949,1948,1826,1706,1947,2067,1934,1935,1825,1837,1717,1718,1705,1836,1835,1823,1824,2248,1685,1684,1681,1677,1673,1676,1680,1672,1787,1571,1575,1475,1377,1471,1574,1801,1689,1570,1567,1364,1369,1365,1259,1465,1563,1565,1467,1464,1263,1266,1269,1262,1267,1373,1469,1371,1368,1797,2127,2131,2018,2014,2130,2243,2249,2237,2126,2022,2143,2027,2137,2028,2142,2141,2135,2136,1912,1901,1905,1789,1786,1904,2019,2015,1900,1909,1796,1800,1792,1793,1908,2029,2023,1913,2033,1486,1391,1386,1284,1493,1595,1594,1588,1589,1289,1397,1295,1390,1288,1499,1593,1491,1492,1487,1272,1276,1277,1273,1379,1479,1478,1474,1376,1483,1382,1285,1280,1281,1387,1583,1482,1383,1579,2047,1928,1921,2039,2038,2159,2037,2149,2032,1927,1827,1707,1700,1587,1816,1815,1937,1809,1817,1805,1692,1688,1693,1923,1922,1916,1917,1804,1696,1582,1697,1578,1701,1929,1810,1811]
const tree = new KDTree(sphere.positions, bounds, K, precalc)

test('make_kdtree', t => {
  let nodes = tree.nodes
  //console.log(nodes)
  for (let n of nodes) {
    let axis = n.level % K;
    if (n.left === -1 && n.right === -1) {
      continue;
    }
    if (n.left !== -1) {
      let l = nodes[n.left];
      //console.log("check l<=n at level", n.level, l.point, " <= ", n.point)
      t.true(l.point[axis] <= n.point[axis]);
    }
    if (n.right !== -1) {
      let r = nodes[n.right];
      //console.log("check n<=r at level", n.level, n.point, " <= ", r.point)
      t.true(n.point[axis] <= r.point[axis]);
    }
  }
})

/**
 * @param {Point} q
 * @param {Point[]} points
 * @param {int} K
 * @returns {Point}
 */
function findNearestNeighborBruteForce(q, points, K) {
  let sorted_pairs = points.map((p, i) => [i, distanceBetweenPoints(p, q, K)]).sort((a, b) => a[1] - b[1])
  return points[sorted_pairs[0][0]]
}

test('nearest neighbor search', t => {
  const hash = new PointHash3D()
  for (let i = 0, len = sphere.positions.length; i < len; i++) {
    hash.insert({id: i, bb: sphere.positions[i]})
  }
  //console.log(hash.cells['0,-1,-2'])
  let q = [4, 0, 4], radius = bounds[1][0] - bounds[0][0], K = 3
  let correctNearestPoint = findNearestNeighborBruteForce(q, sphere.positions, K)
  t.is(radius, 20)
  t.is(tree.findNearestNeighbour(q), correctNearestPoint)
  //t.is(hash.findNearestNeighbours(q, 1)[0].bb, correctNearestPoint)
  //t.is(hash.findNearestNeighbour(q, radius).bb, correctNearestPoint)
})
